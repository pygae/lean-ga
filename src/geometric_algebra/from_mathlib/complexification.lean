import linear_algebra.clifford_algebra.conjugation
import data.complex.module
import ring_theory.tensor_product
import for_mathlib.linear_algebra.bilinear_form.tensor_product
import for_mathlib.algebra.ring_quot
import geometric_algebra.from_mathlib.basic

/-! # Complexification of a clifford algebra

In this file we show the isomorphism

* `clifford_algebra.equiv_complexify Q : clifford_algebra Q.complexify ‚âÉ‚Çê[‚ÑÇ] (‚ÑÇ ‚äó[‚Ñù] clifford_algebra Q)`

where

* `quadratic_form.complexify Q : quadratic_form ‚ÑÇ (‚ÑÇ ‚äó[‚Ñù] V)`

This covers ¬ß2.2 of https://empg.maths.ed.ac.uk/Activities/Spin/Lecture2.pdf.
-/

universes uR uA uV
variables {R : Type uR} {A : Type uA} {V : Type uV}

open_locale tensor_product

namespace quadratic_form

variables [comm_ring R] [comm_ring A] [algebra R A] [invertible (2 : R)]
variables [add_comm_group V] [module R V]

variables (A)

/-- Change the base of a quadratic form, defined by $Q_A(a ‚äó v) = a^2Q(v)$. -/
def base_change (Q : quadratic_form R V) : quadratic_form A (A ‚äó[R] V) :=
bilin_form.to_quadratic_form $
  (bilin_form.tmul' (linear_map.mul A A).to_bilin $ quadratic_form.associated Q)

variables {A}

@[simp] lemma base_change_apply (Q : quadratic_form R V) (c : A) (v : V) :
  Q.base_change A (c ‚äó‚Çú v) = (c*c) * algebra_map _ _ (Q v) :=
begin
  change (c*c) * algebra_map _ _ (Q.associated.to_quadratic_form v) = _,
  rw quadratic_form.to_quadratic_form_associated,
end

variables (A)

lemma base_change.polar_bilin (Q : quadratic_form R V) :
  polar_bilin (Q.base_change A) = (linear_map.mul A A).to_bilin.tmul' Q.polar_bilin :=
begin
  apply bilin_form.to_lin.injective _,
  ext v w : 6,
  change polar (Q.base_change A) (1 ‚äó‚Çú[R] v) (1 ‚äó‚Çú[R] w) = 1 * 1 * algebra_map _ _ (polar Q v w),
  simp_rw [polar, base_change_apply, ‚Üêtensor_product.tmul_add, base_change_apply, one_mul,
    _root_.map_sub],
end

@[simp] lemma base_change_polar_apply (Q : quadratic_form R V)
  (c‚ÇÅ : A) (v‚ÇÅ : V) (c‚ÇÇ : A) (v‚ÇÇ : V) :
  polar (Q.base_change A) (c‚ÇÅ ‚äó‚Çú[R] v‚ÇÅ) (c‚ÇÇ ‚äó‚Çú[R] v‚ÇÇ)
    = (c‚ÇÅ * c‚ÇÇ) * algebra_map _ _ (polar Q v‚ÇÅ v‚ÇÇ) :=
bilin_form.congr_fun (base_change.polar_bilin A Q) _ _


variables {A}

/-- The complexification of a quadratic form, defined by $Q_‚ÑÇ(z ‚äó v) = z^2Q(v)$. -/
@[reducible]
noncomputable def complexify [module ‚Ñù V] (Q : quadratic_form ‚Ñù V) : quadratic_form ‚ÑÇ (‚ÑÇ ‚äó[‚Ñù] V) :=
Q.base_change ‚ÑÇ

end quadratic_form

variables [add_comm_group V] [module ‚Ñù V]

-- this instance is nasty
local attribute [-instance] module.complex_to_real

section algebra_tower_instances

instance free_algebra.algebra' : algebra ‚Ñù (free_algebra ‚ÑÇ (‚ÑÇ ‚äó[‚Ñù] V)) :=
(restrict_scalars.algebra ‚Ñù ‚ÑÇ (free_algebra ‚ÑÇ (‚ÑÇ ‚äó[‚Ñù] V)) : _)

instance tensor_algebra.algebra' : algebra ‚Ñù (tensor_algebra ‚ÑÇ (‚ÑÇ ‚äó[‚Ñù] V)) :=
ring_quot.algebra _

instance tensor_algebra.is_scalar_tower' : is_scalar_tower ‚Ñù ‚ÑÇ (tensor_algebra ‚ÑÇ (‚ÑÇ ‚äó[‚Ñù] V)) :=
ring_quot.is_scalar_tower _

local attribute [semireducible] clifford_algebra

instance clifford_algebra.algebra' (Q : quadratic_form ‚Ñù V) :
  algebra ‚Ñù (clifford_algebra Q.complexify) :=
ring_quot.algebra (clifford_algebra.rel Q.complexify)

instance clifford_algebra.is_scalar_tower (Q : quadratic_form ‚Ñù V) :
  is_scalar_tower ‚Ñù ‚ÑÇ (clifford_algebra Q.complexify) :=
ring_quot.is_scalar_tower _

instance clifford_algebra.smul_comm_class (Q : quadratic_form ‚Ñù V) :
  smul_comm_class ‚Ñù ‚ÑÇ (clifford_algebra Q.complexify) :=
ring_quot.smul_comm_class _

instance clifford_algebra.smul_comm_class' (Q : quadratic_form ‚Ñù V) :
  smul_comm_class ‚ÑÇ ‚Ñù (clifford_algebra Q.complexify) :=
ring_quot.smul_comm_class _

end algebra_tower_instances

namespace clifford_algebra
open quadratic_form (base_change_apply)

/-- Auxiliary construction: note this is really just a heterobasic `clifford_algebra.map`. -/
noncomputable def of_complexify_aux (Q : quadratic_form ‚Ñù V) :
  clifford_algebra Q ‚Üí‚Çê[‚Ñù] clifford_algebra Q.complexify :=
clifford_algebra.lift Q begin
  refine ‚ü®(Œπ Q.complexify).restrict_scalars ‚Ñù ‚àò‚Çó tensor_product.mk ‚Ñù ‚ÑÇ V 1, Œª v, _‚ü©,
  refine (clifford_algebra.Œπ_sq_scalar Q.complexify (1 ‚äó‚Çú v)).trans _,
  rw [base_change_apply, one_mul, one_mul, ‚Üêis_scalar_tower.algebra_map_apply],
end

@[simp] lemma of_complexify_aux_Œπ (Q : quadratic_form ‚Ñù V) (v : V) :
  of_complexify_aux Q (Œπ Q v) = Œπ Q.complexify (1 ‚äó‚Çú v) :=
clifford_algebra.lift_Œπ_apply _ _ _

/-- Convert from the complexified clifford algebra to the clifford algebra over a complexified
module. -/
noncomputable def of_complexify (Q : quadratic_form ‚Ñù V) :
  ‚ÑÇ ‚äó[‚Ñù] clifford_algebra Q ‚Üí‚Çê[‚ÑÇ] clifford_algebra Q.complexify :=
algebra.tensor_product.alg_hom_of_linear_map_tensor_product'
  (tensor_product.algebra_tensor_module.lift $
    let f : ‚ÑÇ ‚Üí‚Çó[‚ÑÇ] _ := (algebra.lsmul ‚ÑÇ (clifford_algebra Q.complexify)).to_linear_map in
    linear_map.flip $ linear_map.flip (({
      to_fun := Œª f : clifford_algebra Q.complexify ‚Üí‚Çó[‚ÑÇ] clifford_algebra Q.complexify,
        linear_map.restrict_scalars ‚Ñù f,
      map_add' := Œª f g, linear_map.ext $ Œª x, rfl,
      map_smul' := Œª (c : ‚ÑÇ) g, linear_map.ext $ Œª x, rfl,
    } : _ ‚Üí‚Çó[‚ÑÇ] _) ‚àò‚Çó f) ‚àò‚Çó (of_complexify_aux Q).to_linear_map)
  (Œª z‚ÇÅ z‚ÇÇ b‚ÇÅ b‚ÇÇ,
    show (z‚ÇÅ * z‚ÇÇ) ‚Ä¢ of_complexify_aux Q (b‚ÇÅ * b‚ÇÇ)
      = z‚ÇÅ ‚Ä¢ of_complexify_aux Q b‚ÇÅ * z‚ÇÇ ‚Ä¢ of_complexify_aux Q b‚ÇÇ,
    by rw [map_mul, smul_mul_smul])
  (Œª r,
    show r ‚Ä¢ of_complexify_aux Q 1 = algebra_map ‚ÑÇ (clifford_algebra Q.complexify) r,
    by rw [map_one, algebra.algebra_map_eq_smul_one])

@[simp] lemma of_complexify_tmul_Œπ (Q : quadratic_form ‚Ñù V) (z : ‚ÑÇ) (v : V) :
  of_complexify Q (z ‚äó‚Çú Œπ Q v) = Œπ _ (z ‚äó‚Çú v) :=
begin
  show z ‚Ä¢ of_complexify_aux Q (Œπ Q v)
    = Œπ Q.complexify (z ‚äó‚Çú[‚Ñù] v),
  rw [of_complexify_aux_Œπ, ‚Üêmap_smul, tensor_product.smul_tmul', smul_eq_mul, mul_one],
end

@[simp] lemma of_complexify_tmul_one (Q : quadratic_form ‚Ñù V) (z : ‚ÑÇ) :
  of_complexify Q (z ‚äó‚Çú 1) = algebra_map _ _ z :=
begin
  show z ‚Ä¢ of_complexify_aux Q 1 = _,
  rw [map_one, ‚Üêalgebra.algebra_map_eq_smul_one],
end

/-- Convert from the clifford algebra over a complexified module to the complexified clifford
algebra. -/
noncomputable def to_complexify (Q : quadratic_form ‚Ñù V) :
  clifford_algebra Q.complexify ‚Üí‚Çê[‚ÑÇ] ‚ÑÇ ‚äó[‚Ñù] clifford_algebra Q :=
clifford_algebra.lift _ $ begin
  let œÜ := tensor_product.algebra_tensor_module.map (linear_map.id : ‚ÑÇ ‚Üí‚Çó[‚ÑÇ] ‚ÑÇ) (Œπ Q),
  refine ‚ü®œÜ, _‚ü©,
  rw clifford_algebra.preserves_iff_bilin _ (is_unit.mk0 (2 : ‚ÑÇ) two_ne_zero),
  ext v w,
  change (1 * 1) ‚äó‚Çú[‚Ñù] (Œπ Q v * Œπ Q w) + (1 * 1) ‚äó‚Çú[‚Ñù] (Œπ Q w * Œπ Q v) =
    quadratic_form.polar (Q.complexify) (1 ‚äó‚Çú[‚Ñù] v) (1 ‚äó‚Çú[‚Ñù] w) ‚äó‚Çú[‚Ñù] 1,
  rw [‚Üê tensor_product.tmul_add, clifford_algebra.Œπ_mul_Œπ_add_swap,
    quadratic_form.base_change_polar_apply, one_mul, one_mul,
    algebra.tensor_product.algebra_map_tmul_one],
end

@[simp] lemma to_complexify_Œπ (Q : quadratic_form ‚Ñù V) (z : ‚ÑÇ) (v : V) :
  to_complexify Q (Œπ _ (z ‚äó‚Çú v)) = z ‚äó‚Çú Œπ Q v :=
clifford_algebra.lift_Œπ_apply _ _ _

lemma to_complexify_comp_involute (Q : quadratic_form ‚Ñù V) :
  (to_complexify Q).comp (involute : clifford_algebra Q.complexify ‚Üí‚Çê[‚ÑÇ] _) =
    (algebra.tensor_product.map' (alg_hom.id _ _) involute).comp (to_complexify Q) :=
begin
  ext v,
  show to_complexify Q (involute (Œπ Q.complexify (1 ‚äó‚Çú[‚Ñù] v)))
    = (algebra.tensor_product.map' _ involute) (to_complexify Q (Œπ Q.complexify (1 ‚äó‚Çú[‚Ñù] v))),
  rw [to_complexify_Œπ, involute_Œπ, map_neg, to_complexify_Œπ, algebra.tensor_product.map'_tmul,
    alg_hom.id_apply, involute_Œπ, tensor_product.tmul_neg],
end

/-- The involution acts only on the right of the tensor product. -/
lemma to_complexify_involute (Q : quadratic_form ‚Ñù V) (x : clifford_algebra Q.complexify) :
  to_complexify Q (involute x) =
    tensor_product.map linear_map.id (involute.to_linear_map) (to_complexify Q x) :=
fun_like.congr_fun (to_complexify_comp_involute Q) x

local attribute [ext] tensor_product.ext

lemma to_complexify_comp_of_complexify (Q : quadratic_form ‚Ñù V) :
  (to_complexify Q).comp (of_complexify Q) = alg_hom.id _ _ :=
begin
  ext z,
  { change to_complexify Q (of_complexify Q (z ‚äó‚Çú[‚Ñù] 1)) = z ‚äó‚Çú[‚Ñù] 1,
    rw [of_complexify_tmul_one, alg_hom.commutes, algebra.tensor_product.algebra_map_apply,
      algebra.id.map_eq_self] },
  { ext v,
    change to_complexify Q (of_complexify Q (1 ‚äó‚Çú[‚Ñù] Œπ Q v))
      = 1 ‚äó‚Çú[‚Ñù] Œπ Q v,
    rw [of_complexify_tmul_Œπ, to_complexify_Œπ] },
end

@[simp] lemma to_complexify_of_complexify (Q : quadratic_form ‚Ñù V) (x : ‚ÑÇ ‚äó[‚Ñù] clifford_algebra Q) :
  to_complexify Q (of_complexify Q x) = x := 
alg_hom.congr_fun (to_complexify_comp_of_complexify Q : _) x

lemma of_complexify_comp_to_complexify (Q : quadratic_form ‚Ñù V) :
  (of_complexify Q).comp (to_complexify Q) = alg_hom.id _ _ :=
begin
  ext,
  show of_complexify Q (to_complexify Q (Œπ Q.complexify (1 ‚äó‚Çú[‚Ñù] x)))
    = Œπ Q.complexify (1 ‚äó‚Çú[‚Ñù] x),
  rw [to_complexify_Œπ, of_complexify_tmul_Œπ],
end

@[simp] lemma of_complexify_to_complexify
  (Q : quadratic_form ‚Ñù V) (x : clifford_algebra Q.complexify) :
  of_complexify Q (to_complexify Q x) = x := 
alg_hom.congr_fun (of_complexify_comp_to_complexify Q : _) x

/-- Complexifying the vector space of a clifford algebra is isomorphic as a ‚ÑÇ-algebra to
complexifying the clifford algebra itself; $ùíû‚Ñì(‚ÑÇ ‚äó V, Q_‚ÑÇ) \iso ‚ÑÇ ‚äó ùíû‚Ñì(V, Q)$.

This is `clifford_algebra.to_complexify` and `clifford_algebra.of_complexify` as an equivalence. -/
@[simps]
noncomputable def equiv_complexify (Q : quadratic_form ‚Ñù V) :
  clifford_algebra Q.complexify ‚âÉ‚Çê[‚ÑÇ] ‚ÑÇ ‚äó[‚Ñù] clifford_algebra Q :=
alg_equiv.of_alg_hom (to_complexify Q) (of_complexify Q)
  (to_complexify_comp_of_complexify Q)
  (of_complexify_comp_to_complexify Q)

end clifford_algebra
